diff --git a/appsumo/banners/admin.py b/appsumo/banners/admin.py
index d75a60a081..7cad8ae59c 100644
--- a/appsumo/banners/admin.py
+++ b/appsumo/banners/admin.py
@@ -51,7 +51,7 @@ class BannerAdmin(ModelAdmin):
             'fields': ('name', 'active', 'content', 'background_color', 'start_date', 'end_date')
         }),
         ('Display Rules', {
-            'fields': ('priority', 'include_pages', 'exclude_pages', 'user_group')
+            'fields': ('is_targeted', 'short_id', 'priority', 'include_pages', 'exclude_pages', 'user_group')
         }),
         ('Sumotest', {
             'fields': ('sumotest_experiment', 'sumotest_variant')
diff --git a/appsumo/banners/forms.py b/appsumo/banners/forms.py
index cf64dd93fe..5b37c2f01f 100644
--- a/appsumo/banners/forms.py
+++ b/appsumo/banners/forms.py
@@ -32,6 +32,15 @@ class BannerForm(ModelForm):
     class Meta:
         model = Banner
         fields = '__all__'
+        labels = {
+            'is_targeted': 'Targeted Banner',
+        }
+        help_texts = {
+            'is_targeted': (
+                "This will show the same banner to a user through the whole session. "
+                "This is usually used for campaign banners."
+            )
+        }
         widgets = {
             'background_color': TextInput(attrs={'type': 'color'}),
             'text_color': TextInput(attrs={'type': 'color'}),
diff --git a/appsumo/banners/migrations/0016_targeted_id_field.py b/appsumo/banners/migrations/0016_targeted_id_field.py
new file mode 100644
index 0000000000..7037bc060e
--- /dev/null
+++ b/appsumo/banners/migrations/0016_targeted_id_field.py
@@ -0,0 +1,23 @@
+# Generated by Django 4.2.16 on 2025-02-13 00:28
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('banners', '0015_alter_banner_user_group'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='banner',
+            name='is_targeted',
+            field=models.BooleanField(default=False, verbose_name='This will show the same banner to a user through the whole session. This is usually used for campaign banners.'),
+        ),
+        migrations.AddField(
+            model_name='banner',
+            name='short_id',
+            field=models.CharField(blank=True, help_text="Short ID used to target specific banners. Add as 'sid' parameter in URL query string, e.g. appsumo.com/?utm_source=campaign&sid=12345678", max_length=8, null=True),
+        ),
+    ]
diff --git a/appsumo/banners/models.py b/appsumo/banners/models.py
index d2fdbe83a1..d55a364e1d 100644
--- a/appsumo/banners/models.py
+++ b/appsumo/banners/models.py
@@ -1,5 +1,7 @@
 import logging
 from typing import Union
+import random
+import string
 
 from django.contrib import messages
 from django.core.exceptions import ValidationError
@@ -28,6 +30,16 @@ class DisplayRule(TimeStampedModel):
 
 class Banner(TimeStampedModel):
     active = models.BooleanField(default=True, verbose_name='Active')
+    is_targeted = models.BooleanField(
+        default=False,
+        verbose_name="This will show the same banner to a user through the whole session. "
+                     "This is usually used for campaign banners."
+    )
+    short_id = models.CharField(
+        max_length=8, blank=True, null=True,
+        help_text="Short ID used to target specific banners. Add as 'sid' parameter in URL query string, "
+                  "e.g. appsumo.com/?utm_source=campaign&sid=12345678"
+    )
 
     name = models.CharField(
         max_length=128, blank=True, null=True,
@@ -122,6 +134,20 @@ class Banner(TimeStampedModel):
     def __str__(self):
         return self.name
 
+    @staticmethod
+    def generate_short_id(length=8):
+        """Generate a random string of letters and numbers."""
+        characters = string.ascii_letters + string.digits
+        while True:
+            short_id = ''.join(random.choices(characters, k=length))
+            if not Banner.objects.filter(short_id=short_id).exists():
+                return short_id
+
+    def save(self, *args, **kwargs):
+        if not self.short_id:
+            self.short_id = self.generate_short_id()
+        super().save(*args, **kwargs)
+
     # Check if banner is live on the site somewhere
     # Checks both status and start/end dates
     def live(self):
diff --git a/appsumo/banners/serializers.py b/appsumo/banners/serializers.py
index 2bc41a8cff..b2866ba16f 100644
--- a/appsumo/banners/serializers.py
+++ b/appsumo/banners/serializers.py
@@ -22,6 +22,8 @@ class BannerSerializer(DynamicModelSerializer):
         model = Banner
         fields = (
             'id',
+            'is_targeted',
+            'short_id',
             'name',
             'content',
             'priority',
