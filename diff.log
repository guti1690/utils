diff --git a/components/cart/cart/Summary/Summary.tsx b/components/cart/cart/Summary/Summary.tsx
index fe234efdb..4c3ad5390 100644
--- a/components/cart/cart/Summary/Summary.tsx
+++ b/components/cart/cart/Summary/Summary.tsx
@@ -21,6 +21,7 @@ import Credits from '~/components/checkout/Global/Credits';
 import { CampaignIncentive } from '~/components/checkout/Summary/CampaignIncentive';
 import { KlarnaMessage } from '~/components/global/KlarnaMessage';
 import CrossSaleSection from '~/components/cart/cart/CrossSaleSection';
+import CurrencyDisclaimer from '~/components/checkout/Global/CurrencyDisclaimer';
 
 export default function Summary({
   hasPlusInCart = false,
@@ -161,6 +162,7 @@ export default function Summary({
             Continue shopping
           </Button>
         )}
+        <CurrencyDisclaimer />
         <Guarantee />
         {!!cart?.shadow_items?.length && showShadowCartUpsell ? (
           <FomoPlusUpsell
diff --git a/components/checkout/Container/Container.tsx b/components/checkout/Container/Container.tsx
index 20408d26c..264f78233 100644
--- a/components/checkout/Container/Container.tsx
+++ b/components/checkout/Container/Container.tsx
@@ -1,4 +1,4 @@
-import { ReactElement, useContext } from 'react';
+import { ReactElement, useCallback, useContext } from 'react';
 import Image from 'next/image';
 import dynamic from 'next/dynamic';
 import { Heading } from '@appsumo/dorado-react';
@@ -15,6 +15,8 @@ import Summary from '../Summary/Summary';
 import Empowered from '~/public/empowered.svg';
 import { KlarnaMessage } from '~/components/global/KlarnaMessage';
 import { CampaignIncentive } from '~/components/checkout/Summary/CampaignIncentive';
+import CurrencySelector from '~/components/common/CurrencySelector';
+import useCurrency from '~/hooks/useCurrency';
 
 const EmptyCart = dynamic(
   () => import('~/components/checkout/Global/EmptyCart'),
@@ -72,30 +74,52 @@ export function Container({
 }: Readonly<{
   cartHasPlusDeal?: boolean;
 }>): ReactElement {
-  const { cart, currentBillingCountry } = useCheckoutState();
+  const { cart, currentBillingCountry, currency, isCurrencyConversionEnabled } =
+    useCheckoutState();
   const {
     campaigns: { showCampaignIncentive },
   } = useContext(GlobalContext);
+  const { update: updateCurrency } = useCurrency();
+
+  const handleCurrencyChange = useCallback(
+    async (currency: string) => {
+      await updateCurrency(currency);
+    },
+    [updateCurrency],
+  );
 
   return (
-    <div className="grid grid-cols-1 md:grid-cols-5 md:gap-x-20">
-      <div className="col-span-1 md:col-span-3">
-        <Heading.H1 className="mb-6">Checkout</Heading.H1>
-        <div className="flex flex-col gap-6">
-          <Account />
-          <RenderSteps
-            cart={cart}
-            currentBillingCountry={currentBillingCountry}
-            cartHasPlusDeal={cartHasPlusDeal}
+    <div>
+      {/* Currency selector row */}
+      {isCurrencyConversionEnabled && (
+        <div className="mb-6 flex justify-end">
+          <CurrencySelector
+            selectedCurrency={currency}
+            onCurrencyChange={handleCurrencyChange}
           />
         </div>
-      </div>
-      <div className="col-span-2">
-        <Heading.H3 className="mb-4 hidden md:block">Order summary</Heading.H3>
-        {showCampaignIncentive && (
-          <CampaignIncentive className="mb-4 hidden md:flex" />
-        )}
-        <Summary />
+      )}
+      <div className="grid grid-cols-1 md:grid-cols-5 md:gap-x-20">
+        <div className="col-span-1 md:col-span-3">
+          <Heading.H1 className="mb-6">Checkout</Heading.H1>
+          <div className="flex flex-col gap-6">
+            <Account />
+            <RenderSteps
+              cart={cart}
+              currentBillingCountry={currentBillingCountry}
+              cartHasPlusDeal={cartHasPlusDeal}
+            />
+          </div>
+        </div>
+        <div className="col-span-2">
+          <Heading.H3 className="mb-4 hidden md:block">
+            Order summary
+          </Heading.H3>
+          {showCampaignIncentive && (
+            <CampaignIncentive className="mb-4 hidden md:flex" />
+          )}
+          <Summary />
+        </div>
       </div>
     </div>
   );
diff --git a/components/checkout/Global/CurrencyDisclaimer.tsx b/components/checkout/Global/CurrencyDisclaimer.tsx
new file mode 100644
index 000000000..d209ac977
--- /dev/null
+++ b/components/checkout/Global/CurrencyDisclaimer.tsx
@@ -0,0 +1,9 @@
+export default function CurrencyDisclaimer() {
+  return (
+    <div className="rounded-lg bg-lemon-light-40/50 p-4 text-sm text-midnight">
+      <strong>Important:</strong> All transactions will be processed in USD
+      regardless of displayed currency. Currency conversions are for display
+      purposes only and use approximate rates updated daily.
+    </div>
+  );
+}
diff --git a/components/checkout/Summary/CartItemPricing.tsx b/components/checkout/Summary/CartItemPricing.tsx
index 658c80ed6..4c582bbde 100644
--- a/components/checkout/Summary/CartItemPricing.tsx
+++ b/components/checkout/Summary/CartItemPricing.tsx
@@ -2,7 +2,7 @@ import React, { ReactElement } from 'react';
 import clsx from 'clsx';
 
 import { CartItemProps } from '~/types/cart';
-import { currencyWithCents } from '~/lib/format';
+import { useCheckoutState } from '~/hooks/checkout';
 
 interface CartItemPricingProps {
   post_discount_total: CartItemProps['post_discount_total'];
@@ -20,8 +20,9 @@ export default React.memo(function CartItemPricing({
   autoCampaignCouponApplied: boolean;
   isCompletePage?: boolean;
 }>): ReactElement {
+  const { convertCurrency, isCurrencyConversionEnabled } = useCheckoutState();
   const priceString = cartItem.subtotal
-    ? `${currencyWithCents(cartItem.subtotal)}`
+    ? `${convertCurrency(cartItem.subtotal, isCurrencyConversionEnabled)}`
     : 'FREE';
   const discountClass = clsx(
     'mt-[2px] self-start font-medium',
@@ -46,7 +47,10 @@ export default React.memo(function CartItemPricing({
       <div>
         <p className={discountClass}>
           {cartItem.price
-            ? `${currencyWithCents(cartItem.post_discount_total)}`
+            ? `${convertCurrency(
+                cartItem.post_discount_total,
+                isCurrencyConversionEnabled,
+              )}`
             : 'FREE'}
         </p>
       </div>
diff --git a/components/checkout/Summary/Discounts.tsx b/components/checkout/Summary/Discounts.tsx
index 3ebf83778..b4fca8e1b 100644
--- a/components/checkout/Summary/Discounts.tsx
+++ b/components/checkout/Summary/Discounts.tsx
@@ -16,6 +16,8 @@ import { CartContext } from '~/contexts/cart';
 
 import SimpleButton from '~/components/common/SimpleButton';
 import { Loader } from '~/components/ui';
+import { useCheckoutState } from '~/hooks/checkout';
+import { useCurrency } from '~/hooks/useCurrency';
 
 enum CouponStatus {
   NO_COUPON = 'no-coupon',
@@ -37,8 +39,18 @@ export default function Discounts({
   cart: CartContextProps['cart'];
 }>): ReactElement {
   const { applyCoupon, unapplyCoupon } = useCart();
-  const { convertCurrency, isCurrencyConversionEnabled } =
+  const { isCurrencyConversionEnabled: isCurrencyConversionEnabledCart } =
     useContext(CartContext);
+  const { isCurrencyConversionEnabled: isCurrencyConversionEnabledCheckout } =
+    useCheckoutState();
+  const isCurrencyConversionEnabled =
+    isCurrencyConversionEnabledCart || isCurrencyConversionEnabledCheckout;
+
+  // Using the hook here since this component is reused between cart and checkout
+  // so, we can't use the context from the cart or checkout state bc it will take the
+  // initial value of the context which is not ok
+  const { convert: convertCurrency } = useCurrency();
+
   const [couponStatus, setCouponStatus] = useState<CouponStatus>(
     CouponStatus.NO_COUPON,
   );
@@ -134,10 +146,12 @@ export default function Discounts({
             <div
               className="ml-auto whitespace-nowrap font-medium"
               data-testid="discount-checkout-coupon-discount"
-            >{`-${convertCurrency(
-              cart.coupon_discount,
-              isCurrencyConversionEnabled,
-            )}`}</div>
+            >
+              {`-${convertCurrency(
+                cart.coupon_discount,
+                isCurrencyConversionEnabled,
+              )}`}
+            </div>
           </div>
           <div className="inline-flex">
             <SimpleButton
diff --git a/components/checkout/Summary/Summary.tsx b/components/checkout/Summary/Summary.tsx
index 83c42d6f3..96ee4925f 100644
--- a/components/checkout/Summary/Summary.tsx
+++ b/components/checkout/Summary/Summary.tsx
@@ -10,7 +10,6 @@ import { useCheckoutState, useCheckoutAPI } from '~/hooks/checkout';
 import { GlobalContext } from '~/contexts/global';
 import { SelectedPaymentType } from '~/types/checkout';
 import { CartItemProps } from '~/types/cart';
-import { currencyWithCents } from '~/lib/format';
 import {
   isFreebie,
   canPayWithCredits,
@@ -35,6 +34,7 @@ import CheckoutButton from '~/components/checkout/Summary/CheckoutButton';
 import { ViewCart } from '~/components/checkout/Summary/ViewCart';
 import Discounts from '~/components/checkout/Summary/Discounts';
 import { CampaignIncentive } from '~/components/checkout/Summary/CampaignIncentive';
+import CurrencyDisclaimer from '../Global/CurrencyDisclaimer';
 
 const { COUPON, CREDITS, NEW_PAYMENT_METHOD } = ADDITIONAL_PAYMENT_METHODS;
 
@@ -52,6 +52,8 @@ export default function Summary(): ReactElement {
     paymentElementData,
     selectedPaymentMethod,
     step,
+    isCurrencyConversionEnabled,
+    convertCurrency,
   } = useCheckoutState();
   const {
     setStepErrorMessage,
@@ -275,7 +277,7 @@ export default function Summary(): ReactElement {
             className="font-medium"
             data-testid="summary-checkout-cart-subtotal"
           >
-            {currencyWithCents(cart?.subtotal)}
+            {convertCurrency(cart?.subtotal ?? 0, isCurrencyConversionEnabled)}
           </div>
         </div>
         {/* Do not show discounts if Freebie */}
@@ -295,7 +297,7 @@ export default function Summary(): ReactElement {
               className="font-medium"
               data-testid="summary-checkout-cart-tax"
             >
-              {currencyWithCents(cart?.tax)}
+              {convertCurrency(cart?.tax ?? 0, isCurrencyConversionEnabled)}
             </div>
           </div>
 
@@ -312,7 +314,7 @@ export default function Summary(): ReactElement {
         <div className="flex font-bold">
           <div className="grow">Total:</div>
           <div data-testid="summary-checkout-cart-total">
-            {currencyWithCents(cart?.total)}
+            {convertCurrency(cart?.total ?? 0, isCurrencyConversionEnabled)}
           </div>
         </div>
       </div>
@@ -328,6 +330,7 @@ export default function Summary(): ReactElement {
         isPayingWithCouponInFull={isPayingWithCouponInFull(cart)}
       />
 
+      <CurrencyDisclaimer />
       <CheckoutTrust />
     </div>
   );
diff --git a/hooks/useCurrency.ts b/hooks/useCurrency.ts
index 98da08c24..cc4c391ba 100644
--- a/hooks/useCurrency.ts
+++ b/hooks/useCurrency.ts
@@ -67,7 +67,9 @@ export const useCurrency = () => {
       }
 
       // We want to format the amount if it's 0 too
-      if (!amount) return format(amount, currencyData.currency);
+      if (!amount) {
+        return format(amount, currencyData.currency);
+      }
 
       // Convert from USD to target currency
       const convertedAmount = amount * currencyData.exchange_rate;
diff --git a/providers/checkout.tsx b/providers/checkout.tsx
index 55718577c..cb5caed67 100644
--- a/providers/checkout.tsx
+++ b/providers/checkout.tsx
@@ -18,6 +18,10 @@ import { useBilling, usePayment, useValidation } from '~/hooks/checkout';
 import useUser from '~/lib/user';
 import { CheckoutStateContext, CheckoutAPIContext } from '~/contexts/checkout';
 import { useCart } from '~/lib/cart';
+import { useCurrency } from '~/hooks/useCurrency';
+import { CURRENCY_CONVERSION_EXPERIMENT_NAME } from '~/lib/util/constants';
+import { useExperiment } from '~/lib/experiment';
+import { isExperimentalVariant } from '~/lib/util/helpers';
 
 interface CheckoutProviderProps {
   initialCart?: CartProps;
@@ -71,6 +75,23 @@ export const CheckoutProvider = ({
   );
   const { setStepValidation, getStepValidation, areAllStepsValid } =
     useValidation();
+  const { convert: convertCurrency } = useCurrency();
+
+  const [isCurrencyConversionEnabled, setIsCurrencyConversionEnabled] =
+    useState<boolean>(false);
+
+  const { variant: currencyConversionVariant } = useExperiment(
+    CURRENCY_CONVERSION_EXPERIMENT_NAME,
+    false,
+    undefined,
+    true,
+  );
+
+  useEffect(() => {
+    setIsCurrencyConversionEnabled(
+      isExperimentalVariant(currencyConversionVariant),
+    );
+  }, [currencyConversionVariant]);
 
   // Clear any login errors if once the user is logged in
   // Set the step validation to true if the user is logged in (or false if not)
@@ -154,6 +175,9 @@ export const CheckoutProvider = ({
       session,
       user,
       discountData,
+      isCurrencyConversionEnabled,
+      convertCurrency,
+      currency: session?.currency,
     };
   }, [
     billingDetails,
@@ -171,6 +195,8 @@ export const CheckoutProvider = ({
     session,
     user,
     discountData,
+    isCurrencyConversionEnabled,
+    convertCurrency,
   ]) as CheckoutStateContextProps;
 
   const checkoutAPIProviderValue = useMemo(() => {
diff --git a/tests/checkout/global/CurrencyDisclaimer.test.tsx b/tests/checkout/global/CurrencyDisclaimer.test.tsx
new file mode 100644
index 000000000..954ffec1b
--- /dev/null
+++ b/tests/checkout/global/CurrencyDisclaimer.test.tsx
@@ -0,0 +1,26 @@
+import { render, screen } from '@testing-library/react';
+import CurrencyDisclaimer from '~/components/checkout/Global/CurrencyDisclaimer';
+
+describe('CurrencyDisclaimer', () => {
+  it('renders the component', () => {
+    render(<CurrencyDisclaimer />);
+
+    // Check if the important text is present
+    expect(screen.getByText('Important:')).toBeInTheDocument();
+  });
+
+  it('displays the correct disclaimer message', () => {
+    render(<CurrencyDisclaimer />);
+
+    // Check for the complete message
+    const message = screen.getByText(
+      /All transactions will be processed in USD/i,
+    );
+    expect(message).toBeInTheDocument();
+
+    // Check for the currency conversion disclaimer
+    expect(
+      screen.getByText(/Currency conversions are for display purposes only/i),
+    ).toBeInTheDocument();
+  });
+});
diff --git a/tests/components/checkout/Complete/Details.test.tsx b/tests/components/checkout/Complete/Details.test.tsx
index 8af8d1bab..e6bd24bf2 100644
--- a/tests/components/checkout/Complete/Details.test.tsx
+++ b/tests/components/checkout/Complete/Details.test.tsx
@@ -4,14 +4,24 @@ import '@testing-library/jest-dom';
 
 import { MOCK_ORDER_COMPLETE_DATA } from '~/tests/constants';
 import { Details } from '~/components/checkout/Complete';
+import { CheckoutStateContext } from '~/contexts/checkout';
+import { INITIAL_STATE_CONTEXT } from '~/tests/components/checkout/constants';
+import { MOCK_CART_OBJECT } from '~/tests/components/cart/constants';
+
+const mockCheckoutProvider = {
+  ...INITIAL_STATE_CONTEXT,
+  cart: MOCK_CART_OBJECT,
+};
 
 describe('Details', () => {
   it('renders without errors', () => {
     const { getByText } = render(
-      <Details
-        invoice={MOCK_ORDER_COMPLETE_DATA.invoice}
-        user={MOCK_ORDER_COMPLETE_DATA.user}
-      />,
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <Details
+          invoice={MOCK_ORDER_COMPLETE_DATA.invoice}
+          user={MOCK_ORDER_COMPLETE_DATA.user}
+        />
+      </CheckoutStateContext.Provider>,
     );
 
     expect(getByText('Download invoice')).toBeInTheDocument();
diff --git a/tests/components/checkout/Complete/ProductLineItems.test.tsx b/tests/components/checkout/Complete/ProductLineItems.test.tsx
index 87293859e..03d44605e 100644
--- a/tests/components/checkout/Complete/ProductLineItems.test.tsx
+++ b/tests/components/checkout/Complete/ProductLineItems.test.tsx
@@ -4,11 +4,21 @@ import '@testing-library/jest-dom';
 
 import { MOCK_ORDER_COMPLETE_DATA } from '~/tests/constants';
 import { ProductLineItems } from '~/components/checkout/Complete';
+import { CheckoutStateContext } from '~/contexts/checkout';
+import { INITIAL_STATE_CONTEXT } from '~/tests/components/checkout/constants';
+import { MOCK_CART_OBJECT } from '../../cart/constants';
+
+const mockCheckoutProvider = {
+  ...INITIAL_STATE_CONTEXT,
+  cart: MOCK_CART_OBJECT,
+};
 
 describe('ProductLineItems', () => {
   it('renders correctly', () => {
     const { getByText, queryByText } = render(
-      <ProductLineItems invoice={MOCK_ORDER_COMPLETE_DATA.invoice} />,
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <ProductLineItems invoice={MOCK_ORDER_COMPLETE_DATA.invoice} />,
+      </CheckoutStateContext.Provider>,
     );
 
     expect(
@@ -30,7 +40,9 @@ describe('ProductLineItems', () => {
     mockedData.invoice.invoice_items[0].deal_plan.public_name =
       mockedData.invoice.invoice_items[0].deal.public_name;
     const { getByText } = render(
-      <ProductLineItems invoice={MOCK_ORDER_COMPLETE_DATA.invoice} />,
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <ProductLineItems invoice={MOCK_ORDER_COMPLETE_DATA.invoice} />,
+      </CheckoutStateContext.Provider>,
     );
 
     expect(
diff --git a/tests/components/checkout/Summary/Discounts.test.tsx b/tests/components/checkout/Summary/Discounts.test.tsx
index eef714f4f..8de88296f 100644
--- a/tests/components/checkout/Summary/Discounts.test.tsx
+++ b/tests/components/checkout/Summary/Discounts.test.tsx
@@ -46,6 +46,12 @@ const NO_COUPON_STATE = {
 
 jest.mock('~/lib/cart');
 
+jest.mock('~/hooks/useCurrency', () => ({
+  useCurrency: () => ({
+    convert: (amount: number) => formatByCurrency({ amount, currency: 'USD' }),
+  }),
+}));
+
 // @ts-ignore -- mockImplementation is mocked and typescript does not recognize it
 useCart.mockImplementation(() => ({
   applyCoupon: MOCK_APPLY_COUPON,
diff --git a/tests/components/checkout/Summary/ViewCart.test.tsx b/tests/components/checkout/Summary/ViewCart.test.tsx
index 4f7380d61..345abf47a 100644
--- a/tests/components/checkout/Summary/ViewCart.test.tsx
+++ b/tests/components/checkout/Summary/ViewCart.test.tsx
@@ -1,10 +1,21 @@
 import { render, fireEvent } from '@testing-library/react';
 import { ViewCart } from '~/components/checkout/Summary/ViewCart';
 import { MOCK_CART_OBJECT } from '~/tests/components/cart/constants';
+import { CheckoutStateContext } from '~/contexts/checkout';
+import { INITIAL_STATE_CONTEXT } from '~/tests/components/checkout/constants';
+
+const mockCheckoutProvider = {
+  ...INITIAL_STATE_CONTEXT,
+  cart: MOCK_CART_OBJECT,
+};
 
 describe('<ViewCart />', () => {
   it('renders without crashing', () => {
-    render(<ViewCart cart={MOCK_CART_OBJECT} />);
+    render(
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <ViewCart cart={MOCK_CART_OBJECT} />
+      </CheckoutStateContext.Provider>,
+    );
   });
 
   it('does not render if cart is empty', () => {
@@ -18,7 +29,11 @@ describe('<ViewCart />', () => {
   });
 
   it('toggles disclosure panel on button click', () => {
-    const { getByText } = render(<ViewCart cart={MOCK_CART_OBJECT} />);
+    const { getByText } = render(
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <ViewCart cart={MOCK_CART_OBJECT} />
+      </CheckoutStateContext.Provider>,
+    );
     const button = getByText(/view cart/i);
     fireEvent.click(button);
     expect(getByText('Edit cart')).not.toBeNull();
diff --git a/tests/components/checkout/constants.ts b/tests/components/checkout/constants.ts
index e8ff837da..12565c993 100644
--- a/tests/components/checkout/constants.ts
+++ b/tests/components/checkout/constants.ts
@@ -3,6 +3,7 @@ import {
   DEFAULT_BILLING_DETAILS,
   ADDITIONAL_PAYMENT_METHODS,
 } from '~/constants/checkout';
+import { formatByCurrency } from '~/lib/format';
 
 export const INITIAL_API_CONTEXT = {
   areAllStepsValid: () => false,
@@ -49,6 +50,10 @@ export const INITIAL_STATE_CONTEXT = {
   defaultPaymentMethod: null,
   paymentMethods: [],
   isCheckoutSecure: true,
+  convertCurrency: (amount: number) =>
+    formatByCurrency({ amount, currency: 'USD' }),
+  isCurrencyConversionEnabled: false,
+  currency: 'USD',
 };
 
 export const INITIAL_CART_ITEM = {
diff --git a/tests/pages/checkout/complete.test.tsx b/tests/pages/checkout/complete.test.tsx
index 9039e5629..3cd7f8e5e 100644
--- a/tests/pages/checkout/complete.test.tsx
+++ b/tests/pages/checkout/complete.test.tsx
@@ -12,6 +12,9 @@ import CheckoutComplete, {
   getServerSideProps,
 } from '~/pages/checkout/complete/';
 import { GlobalContext } from '~/contexts/global';
+import { CheckoutStateContext } from '~/contexts/checkout';
+import { INITIAL_STATE_CONTEXT } from '~/tests/components/checkout/constants';
+import { MOCK_CART_OBJECT } from '~/tests/components/cart/constants';
 
 jest.mock('~/lib/user');
 jest.mock('~/hooks/rewards', () => ({
@@ -45,6 +48,11 @@ const globalProvider = generateGlobalContextProps({
   hasUserDataOnDatalayer: true,
 });
 
+const mockCheckoutProvider = {
+  ...INITIAL_STATE_CONTEXT,
+  cart: MOCK_CART_OBJECT,
+};
+
 describe('<CheckoutComplete /> ', () => {
   afterEach(cleanup);
 
@@ -57,9 +65,11 @@ describe('<CheckoutComplete /> ', () => {
 
   it('should render Profile', () => {
     const { container } = render(
-      <DoradoProvider>
-        <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
-      </DoradoProvider>,
+      <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+        <DoradoProvider>
+          <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
+        </DoradoProvider>
+      </CheckoutStateContext.Provider>,
     );
 
     expect(container).toBeInstanceOf(HTMLDivElement);
@@ -145,9 +155,11 @@ describe('getServerSideProps function', () => {
 
     render(
       <GlobalContext.Provider value={globalProvider}>
-        <DoradoProvider>
-          <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
-        </DoradoProvider>
+        <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+          <DoradoProvider>
+            <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
+          </DoradoProvider>
+        </CheckoutStateContext.Provider>
       </GlobalContext.Provider>,
     );
 
@@ -186,9 +198,11 @@ describe('getServerSideProps function', () => {
 
     render(
       <GlobalContext.Provider value={globalProvider}>
-        <DoradoProvider>
-          <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
-        </DoradoProvider>
+        <CheckoutStateContext.Provider value={mockCheckoutProvider}>
+          <DoradoProvider>
+            <CheckoutComplete data={MOCK_ORDER_COMPLETE_DATA} error={null} />
+          </DoradoProvider>
+        </CheckoutStateContext.Provider>
       </GlobalContext.Provider>,
     );
 
diff --git a/types/checkout/checkout.d.ts b/types/checkout/checkout.d.ts
index 8158935ef..35c1d3cf8 100644
--- a/types/checkout/checkout.d.ts
+++ b/types/checkout/checkout.d.ts
@@ -120,6 +120,12 @@ export interface CheckoutStateContextProps {
   submittedPaymentMethod: SelectedPaymentType;
   user?: UserObjectProps;
   discountData?: DiscountDataType;
+  isCurrencyConversionEnabled: boolean;
+  convertCurrency: (
+    amount: number,
+    isCurrencyConversionEnabled: boolean,
+  ) => string;
+  currency: string;
 }
 
 export interface CheckoutAPIContextProps {
